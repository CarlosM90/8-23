Remember our simple Puppy class? It looked like this:

class Puppy
end
Its instances couldn't do much. Let's say we wanted to add some behavior, or instance methods, to the Puppy class.

We could add the ability to fetch by expanding our class declaration, like this:

class Puppy

  def fetch(toy)
    puts "I brought back the #{toy}!"
  end

end
Does this syntax look familiar? It should, because it's plain old method syntax. An instance method like the one above can be created simply by adding a method inside the class declaration (between the class and end keywords).

We should probably fix one little thing, though ...

class Puppy

  def fetch(toy)
    puts "I brought back the #{toy}!"
    toy
  end

end

In a new Ruby file, maybe name it "puppy_exercise.rb":
Add driver code at the bottom that initializes an instance of Puppy, and verify that your instance can now fetch a ball. Run the file from the command line to check your work.
Add a speak method that takes an integer, and then prints "Woof!" that many times.
Add a roll_over method that just prints "*rolls over*".
Add a dog_years method that takes an integer (of human years) and converts that number to dog years, returning a new integer.
Add one more trick -- whichever one you'd like.
If you haven't already, update your driver code to demonstrate that all of these methods work as expected.
Add a method to your Puppy class named initialize. It should print "Initializing new puppy instance ..."
Without changing your driver code, run the program. Does initialize run? When?

Now, design and implement your own class below the Puppy class -- anything you'd like, but it should have an initialize method and at least two other instance methods. Then do the following:

Use a loop to make 50 instances of your class.
Modify your loop so that it stores all of the instances in a data structure.
Iterate over that data structure using .each and call the instance methods you wrote on each instance. So if you wrote a Gymnast class, this is where you'd call .flip and .jump on each of your instances of Gymnast.
If the steps above feel really unfamiliar, remember that you've been working with classes the entire time -- strings are instances of the String class. So you can start by using string instances in place of your own class instances, if that helps you visualize how the code should come together.
