We've learned how to add behavior to a class. Now we want to learn how to add state -- the characteristics, or data, of each instance. Most objects in our world have some sort of state. The state, or attributes, of a piece of furniture might be described as its ...

age
height
width
depth
weight
The state of a person, at least as communicated on a driver's license, might include eye color, age, height, and hair color.

Attributes are just a special sort of variable that you can use inside of a class declaration. In this challenge, you'll get some practice declaring and updating attributes.

Each instance has its own independent set of attribute data. Otherwise, every instance of the Human class would be stuck with the same eye color, skin color, and hair color. Even more vexing: when one person dyed their hair bright purple, everyone else on the planet would suddenly have purple hair, too.

In this rigid dystopia, we'd be stuck hoping that nobody tried to trim their own bangs on the day of our job interview. Not convenient.

Some attributes might change frequently (hair color and age, for example). Others might change rarely, if at all: A table's height is unlikely to increase over time, unless it is a very interesting table indeed.


Eventually, your simulator will build thousands of Santas, but for now, start by defining a Santa class in a new Ruby file. Your class should have three instance methods:

A speak method that will print "Ho, ho, ho! Haaaappy holidays!" (Santa has been working on being more inclusive.)
An eat_milk_and_cookies method that takes a cookie type (example: "snickerdoodle") as a parameter and prints "That was a good <type of cookie here>!" 
An initialize method that prints "Initializing Santa instance ...".
Add a bit of code below your class declaration to check that you're able to initialize a Santa instance and call its methods.

Update your Santa class with the following attributes:

gender, which will be a string passed in on initialization
ethnicity, which will be a string passed in on initialization
reindeer_ranking, an array of reindeer from most preferred to least preferred. This is not passed in on initialization; it simply gets a default value of ["Rudolph", "Dasher", "Dancer", "Prancer", "Vixen", "Comet", "Cupid", "Donner", "Blitzen"]
age, which is not passed in on initialization and defaults to 0

Now, our simulated Santas can sign up for the conference using whatever identifying terms feel best to them. The following initialization code would work:

santas = []
santas << Santa.new("agender", "black")
santas << Santa.new("female", "Latino")
santas << Santa.new("bigender", "white")
santas << Santa.new("male", "Japanese")
santas << Santa.new("female", "prefer not to say")
santas << Santa.new("gender fluid", "Mystical Creature (unicorn)")
santas << Santa.new("N/A", "N/A")

Add three attribute-changing methods to your Santa class:

celebrate_birthday should age Santa by one year.
get_mad_at can take a reindeer's name as an argument, and move that reindeer in last place in the reindeer rankings. Vixen knows what he did.
The @gender attribute should have a setter method that allows @gender to be reassigned from outside the class definition.
Add two "getter" methods as well:

The method age should simply return @age.
The method ethnicity should return @ethnicity.
Update your driver code to test your work.

Write a program that creates lots of Santas. If you're on a cloud-based environment, you may not want to push it past about a hundred Santas. If you're on a faster computer, you may be able to make lots more than that. Play around with the numbers and see what happens.

Obviously, no one wants to create ten thousand Santas by hand. That's what computers are for!

Use our array of example genders and an array of example ethnicities (and feel free to add to it if you like -- each array could have a lot more options in it!) to create your Santas with a randomly selected gender and a randomly selected ethnicity. (How do you randomly select an array item? The Array documentation should be able to help you out there!)
Set your new Santa's age to a random number between 0 and 140.
No need to store your Santas in a data structure, but your program should print out the attributes of each Santa using the instance methods that give you access to that data.
