Let's use IRB to learn more about classes.

In IRB, declare your Puppy class:

class Puppy
end
That's ... it? Well, this class is about as simple as it gets. We haven't added any characteristics or behavior yet. But even this simple declaration allows us to do a lot.

Ask your class what methods are available:
Puppy.methods
Did you know that you can call .methods on objects in Ruby to find out what built-in methods are available? (To see some methods that you likely recognize already, try it on a string, or on an array.) As a class, Puppy comes with a ton of methods available right out of the box. There's a lot of crazy stuff in this list that we don't understand yet. For now, only one method here matters: new. This means that we can call Puppy.new, which will create a new instance of the Puppy class. (Remember, instances are to classes as members are to species: the class is just a blueprint for what an instance might look like and how it might behave.)

Create a new instance of a Puppy and save it in a variable:

duchess = Puppy.new
fido = Puppy.new
spot = Puppy.new
We just made three unique instances of the Puppy class.

We haven't taught these pups many tricks, and yet they can respond to quite a few method calls already. Run each line separately, making guesses as to what the response will look like.

spot.class
duchess == fido
fido.instance_of?(Array)
fido.instance_of?(Puppy)
spot.play_dead
Alas, Spot doesn't know that one yet.

Notice that you can call methods on the class itself (Puppy.new, for example), or on an instance of a class (some_puppy_instance.bark). Methods you call on a class are called class methods. Methods you call on an instance are called instance methods.

You've been using instance methods quite often already -- anytime you call a method on a particular string, or array, or integer, you are calling an instance method. You haven't called many class methods, but you certainly could.

TRY THE THING
Run this code in IRB to create a new string using a class method:

str = String.new
str.length
str.empty?
str += "huh."
In the past, we have often made new instances of the String class by declaring them literally:

str = "some string"
... but String.new will work too, and even takes an argument for what characters you would like to put in the string. Try it:

greeting = String.new("hello")
greeting.length
greeting.upcase
It's important to understand the difference between class methods and instance methods. A class and an instance of a class are two completely separate objects. You wouldn't call .new on an instance of a string, and you wouldn't call .length on the String class itself.

But how can we teach our puppy instances to fetch, roll over, or offer a high five? We can do this by writing our own instance methods -- which is exactly what we'll do in the next challenge. 
